This RTS has the restriction `No_Exception_Propagation`.

This means that any unhandled exception in a subprogram will immediately result in a call to `Last_Chance_Handler`, which won't return.

Also, you can't use the `raise` statement to do partial handling, as in

<!-- language: lang-ada -->
    declare
       Err : exception;
    begin
       begin
          raise Err with "test";
       exception
          when Err =>
             --  partial cleanup
             raise;                  -- this is not permitted
       end;
    exception
       when Err => null;             -- this is OK
    end;

The RTS's last chance exception handler is written as

<!-- language: lang-c -->
     __attribute__((weak))
     void __gnat_last_chance_handler(const char *message, int line) {
       // Loop indefinitely: use the debugger to examine the backtrace.
       while (1) {}
     }

and the `weak` attribute means that you can write your own version to do something more immediately useful, provided it matches the spec

<!-- language: lang-ada -->
    procedure Last_Chance_Handler
      (Message : System.Address; Line : Integer)
    with
      Export,
      Convention => C,
      External_Name => "__gnat_last_chance_handler";

Note that at the moment the `Line` parameter is always `0`.
